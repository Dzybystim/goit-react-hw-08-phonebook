{"version":3,"file":"static/js/25.5fe6d41d.chunk.js","mappings":"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","sources":["components/InputField/InputField.styled.jsx","components/InputField/InputField.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contact/Contact.styled.jsx","components/Contacts/Contact/ChangeForm/ChangeForm.styled.jsx","components/Contacts/Contact/ChangeForm/ChangeForm.jsx","components/Contacts/Contact/Contact.jsx","components/Contacts/Contacts.jsx","page/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const AppBarStyled = styled.header`\nborder: 1px solid black;\npadding: 10px;\n`\n\nexport const AppBarSpanStyled = styled.span`\nmargin-right: 10px;\n`\nexport const AppBarStyledInput = styled.input`\nmargin-right: 20px;\n`\n\nexport const AppBarStyledButton = styled.button`\n\n    display: inline-flex;\n    margin: 10px;\n    text-decoration: none;\n    position: relative;\n    font-size: 12px;\n    line-height: 12px;\n    padding: 6px 15px;\n    color: black;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-family: 'Roboto Condensed', Тahoma, sans-serif;\n    background: buttonface;\n    cursor: pointer;\n    border: 2px solid #BFE2FF;\n\n:hover,\n:active,\n:focus {\n    color: blue;\n}\n\n:after,\n:before {\n    position: absolute;\n    height: 2px;\n    left: 50%;\n    background: #337AB7;\n    bottom: -6px;\n    content: \"\";\n    transition: all 280ms ease-in-out;\n    width: 0;\n}\n:before {\n    top: -6px;\n}\n:hover:after,\n:hover:before,\n:active:after,\n:active:before,\n:focus:after,\n:focus:before {\n    width: 100%;\n    left: 0;\n}\n`\n","import { useSelector, useDispatch } from \"react-redux\"\nimport {selectContacts} from \"../../redux/selectors\"\nimport PropTypes from 'prop-types';\nimport {AppBarStyled, AppBarSpanStyled, AppBarStyledInput, AppBarStyledButton} from './InputField.styled'\nimport {addContact} from \"../../redux/operations\"\n\n\n\n\nexport default function InputField ({title, titleInputOne, titleInputTwo}) {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const check = (nameContact) => {\n     const checkBoolean = contacts.find(contact => contact.name === nameContact)\n     return checkBoolean\n    }\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const checkBoolean = check(event.target.elements.name.value)\n        if(checkBoolean){\n            return alert(`${event.target.elements.name.value} is already in contacts`)\n        } else {\n            dispatch(addContact({name: event.target.elements.name.value, phone: event.target.elements.number.value}))\n        }\n        event.target.reset()\n    }\n\n    return <AppBarStyled>\n        <h1> {title} </h1>\n        <form onSubmit={handleSubmit}>\n        <label> <AppBarSpanStyled>{titleInputOne}</AppBarSpanStyled>\n            <AppBarStyledInput           \n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. \n            For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required/>\n        </label>\n        <label> <AppBarSpanStyled>{titleInputTwo}</AppBarSpanStyled>\n             <AppBarStyledInput             \n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required/>\n        </label>\n        <AppBarStyledButton type=\"submit\">Add Contact</AppBarStyledButton>\n        </form>\n    </AppBarStyled>\n}\n\n\nInputField.propTypes = {\n    title: PropTypes.string.isRequired,\n    titleInputOne: PropTypes.string.isRequired,\n    titleInputTwo: PropTypes.string.isRequired,\n}","import styled from 'styled-components'\n\nexport const FilterStyled = styled.span`\nmargin-right: 15px;\n`","import { useDispatch } from \"react-redux\"\nimport {FilterStyled} from \"./Filter.styled\"\nimport {setStatusFilter} from \"../../redux/filterSlice\"\nimport PropTypes from 'prop-types';\n\nexport default function Filter({title, titleInput}) {\n\n    const dispatch = useDispatch()\n\n    const handleChange = (event) => {\n        dispatch(setStatusFilter(event.target.value))\n    }\n\n    return <section>\n    <h1>{title}</h1>\n    <label> <FilterStyled>{titleInput}</FilterStyled>\n        <input type='text' onChange={handleChange} />\n    </label>\n    </section>\n}\n\nFilter.propTypes = {\n    title: PropTypes.string.isRequired,\n    titleInput: PropTypes.string.isRequired,\n}","import styled from 'styled-components'\n\nexport const ContactsStyled = styled.ul`\npadding: 0;\ndisplay: flex;\njustify-content: flex-start;\nalign-items: baseline;\nflex-wrap: wrap;\ngap: 15px;\n`","import styled from 'styled-components'\n\nexport const ContactStyled = styled.li`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\ngap: 15px;\nwidth: 45%;\nheight: 60px;\nborder: 1px solid black;\npadding: 10px;\n`\n\nexport const ContactStyledTwo = styled.li`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\ngap: 15px;\nwidth: 45%;\nheight: 100px;\nborder: 1px solid black;\npadding: 10px;\n`\n\n\nexport const ContactStyledButton = styled.button`\ndisplay: inline-flex;\n    min-width: 10%;\n    margin: 0;\n    text-decoration: none;\n    position: relative;\n    font-size: 10px;\n    line-height: 12px;\n    padding: 6px 15px;\n    color: black;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-family: 'Roboto Condensed', Тahoma, sans-serif;\n    background: buttonface;\n    cursor: pointer;\n    border: 2px solid #BFE2FF;\n\n:hover,\n:active,\n:focus {\n    color: blue;\n}\n\n:after,\n:before {\n    position: absolute;\n    height: 2px;\n    left: 50%;\n    background: #337AB7;\n    bottom: -6px;\n    content: \"\";\n    transition: all 280ms ease-in-out;\n    width: 0;\n}\n:before {\n    top: -6px;\n}\n:hover:after,\n:hover:before,\n:active:after,\n:active:before,\n:focus:after,\n:focus:before {\n    width: 100%;\n    left: 0;\n}\n`\n\nexport const ContactParahStyled = styled.p`\nmargin: 0;\ndisplay: block;\nwidth: 70%;\nfont-size: 18px;\n`","import styled from \"styled-components\";\n\nexport const FormChange = styled.form`\nwidth: 70%;\n`\n\nexport const ContainerStyled = styled.div`\ndisplay: flex;\ngap: 10px;\n`\n\nexport const InputStyled = styled.input`\nmax-width: 30%;\n`\n\nexport const ContactStyledButton = styled.button`\ndisplay: inline-flex;\n    margin-top: 10px;\n    text-decoration: none;\n    position: relative;\n    font-size: 12px;\n    line-height: 12px;\n    padding: 6px 15px;\n    color: black;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-family: 'Roboto Condensed', Тahoma, sans-serif;\n    background: buttonface;\n    cursor: pointer;\n    border: 2px solid #BFE2FF;\n\n:hover,\n:active,\n:focus {\n    color: blue;\n}\n\n:after,\n:before {\n    position: absolute;\n    height: 2px;\n    left: 50%;\n    background: #337AB7;\n    bottom: -6px;\n    content: \"\";\n    transition: all 280ms ease-in-out;\n    width: 0;\n}\n:before {\n    top: -6px;\n}\n:hover:after,\n:hover:before,\n:active:after,\n:active:before,\n:focus:after,\n:focus:before {\n    width: 100%;\n    left: 0;\n}\n`\n\nexport const SpanStyled = styled.span`\nfont-size: 18px;\n`","import { useDispatch } from \"react-redux\";\nimport { useState } from \"react\"\nimport { changeContact } from \"../../../../redux/operations\"\nimport {FormChange, InputStyled, ContainerStyled, ContactStyledButton, SpanStyled} from \"./ChangeForm.styled\"\n\nexport default function ChangeForm({contact, setChangeClick}) {\nconst dispatch = useDispatch();\nconst [changeName, setChangeName] = useState(contact.name);\nconst [changeNumber, setChangeNumber] = useState(contact.number);\n\nconst handleChange = event => {\n    switch(event.target.name){\n      case 'name':\n        setChangeName(event.target.value);\n        break;\n      case 'number':\n        setChangeNumber(event.target.value);\n        break;\n        default: console.error('Ошибка в Contact (handleChange)')\n    }\n  }\n\nconst handleSubmit = event => {\n    event.preventDefault();\n    dispatch(changeContact({id: contact.id, name: event.target.elements.name.value, phone: event.target.elements.number.value}))\n    setChangeClick(false)\n}\n\n\nreturn <>\n<FormChange onSubmit={handleSubmit}>\n<ContainerStyled>\n<SpanStyled>Name:</SpanStyled>\n<InputStyled \ntype=\"text\"\nname=\"name\"\npattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\ntitle=\"Name may contain only letters, apostrophe, dash and spaces. \nFor example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\nrequired\nvalue={changeName}\nonChange={handleChange}\n/>\n<SpanStyled>Number:</SpanStyled>\n<InputStyled \nvalue={changeNumber}\nonChange={handleChange}\ntype=\"tel\"\nname=\"number\"\npattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\ntitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\nrequired\n/>\n\n</ContainerStyled>\n<ContactStyledButton type=\"submit\">Save</ContactStyledButton>\n</FormChange>\n</>\n}","import { ContactStyled, ContactStyledButton, ContactParahStyled, ContactStyledTwo } from \"./Contact.styled\"\nimport ChangeForm from \"./ChangeForm/ChangeForm\"\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact} from \"../../../redux/operations\"\nimport { useState } from \"react\"\nimport PropTypes from 'prop-types';\n\n\nexport default function Contact({contact}) {\n\n    const dispatch = useDispatch();\n    const [changeClick, setChangeClick] = useState(false);\n\n    const handleClickDelete = () => {\n        dispatch(deleteContact(contact.id))\n    }\n\n    const handleClickChange = () => {\n        setChangeClick(changeClick ? false : true)\n    }\n\n\n    \n    return <>\n        {changeClick ?  \n        <>\n        <ContactStyledTwo>\n        <ChangeForm contact={contact} setChangeClick={setChangeClick}/>\n        <ContactStyledButton type=\"button\" onClick={handleClickChange}>No Change</ContactStyledButton> \n        </ContactStyledTwo>\n        </>\n        :\n        <>\n        <ContactStyled>\n        <ContactParahStyled>{contact.name}: {contact.number}</ContactParahStyled>\n        <ContactStyledButton type=\"button\" onClick={handleClickDelete} > Delete</ContactStyledButton>\n        <ContactStyledButton type=\"button\" onClick={handleClickChange}>Change</ContactStyledButton>\n        </ContactStyled>\n        </> \n            }\n            </>\n    \n}\n\nContact.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }) \n}","import { useSelector } from \"react-redux\";\nimport {selectContacts, selectFilter} from \"../../redux/selectors\"\nimport {ContactsStyled} from \"./Contacts.styled\"\n\nimport Contact from \"./Contact/Contact\"\n\nconst getVisibleContacts = (contacts, filterNormalize) => {\n   return contacts.filter(contact => {  \n    return contact.name.toLowerCase().includes(filterNormalize)})\n}\n\n\nexport default function Contacts() {\n\nconst contacts = useSelector(selectContacts)\nconst filter = useSelector(selectFilter)\n\nconst normalize = filter.toLowerCase()\n\nconst visibleContacts = getVisibleContacts(contacts, normalize)\n\n\n    return <section>\n        <ContactsStyled>\n        {visibleContacts.map(contact => {\n            return <Contact contact={contact} key={contact.id}/>\n        })}\n        </ContactsStyled>\n    </section>\n}","import InputField from \"components/InputField/InputField\";\nimport Filter from \"components/Filter/Filter\";\nimport Contacts from \"components/Contacts/Contacts\";\n//import {selectIsLoading, selectError} from \"../../redux/selectors\"\nimport {useDispatch} from \"react-redux\";\nimport { fetchContacts } from \"../../redux/operations\";\nimport { useEffect } from \"react\";\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n\n//    const isLoading = useSelector(selectIsLoading)\n//    const error = useSelector(selectError)\n// {isLoading && !error && <p>Request in progress...</p>}\n\n\n      useEffect(() => { dispatch(fetchContacts());}, [dispatch])\n\n\n    return <>\n           <InputField title='Phonebook' titleInputOne='Name' titleInputTwo='Number'/>\n           <Filter title='Contacts' titleInput='Find contacts by name'/>\n           <Contacts />\n    </>\n}"],"names":["AppBarStyled","styled","AppBarSpanStyled","AppBarStyledInput","AppBarStyledButton","InputField","title","titleInputOne","titleInputTwo","dispatch","useDispatch","contacts","useSelector","selectContacts","onSubmit","event","nameContact","preventDefault","target","elements","name","value","find","contact","alert","addContact","phone","number","reset","type","pattern","required","FilterStyled","Filter","titleInput","onChange","setStatusFilter","ContactsStyled","ContactStyled","ContactStyledTwo","ContactStyledButton","ContactParahStyled","FormChange","ContainerStyled","InputStyled","SpanStyled","ChangeForm","setChangeClick","useState","changeName","setChangeName","changeNumber","setChangeNumber","handleChange","console","error","changeContact","id","Contact","changeClick","handleClickChange","onClick","deleteContact","Contacts","visibleContacts","filterNormalize","filter","toLowerCase","includes","getVisibleContacts","selectFilter","map","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}