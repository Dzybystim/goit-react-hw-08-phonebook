{"version":3,"file":"static/js/411.b6f9bd27.chunk.js","mappings":"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","sources":["components/InputField/InputField.styled.jsx","components/InputField/InputField.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contact/Contact.styled.jsx","components/Contacts/Contact/Contact.jsx","components/Contacts/Contacts.jsx","page/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const AppBarStyled = styled.header`\nborder: 1px solid black;\npadding: 10px;\n`\n\nexport const AppBarSpanStyled = styled.span`\nmargin-right: 10px;\n`\nexport const AppBarStyledInput = styled.input`\nmargin-right: 20px;\n`\n\nexport const AppBarStyledButton = styled.button`\n\n    display: inline-flex;\n    margin: 10px;\n    text-decoration: none;\n    position: relative;\n    font-size: 12px;\n    line-height: 12px;\n    padding: 6px 15px;\n    color: black;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-family: 'Roboto Condensed', Тahoma, sans-serif;\n    background: buttonface;\n    cursor: pointer;\n    border: 2px solid #BFE2FF;\n\n:hover,\n:active,\n:focus {\n    color: blue;\n}\n\n:after,\n:before {\n    position: absolute;\n    height: 2px;\n    left: 50%;\n    background: #337AB7;\n    bottom: -6px;\n    content: \"\";\n    transition: all 280ms ease-in-out;\n    width: 0;\n}\n:before {\n    top: -6px;\n}\n:hover:after,\n:hover:before,\n:active:after,\n:active:before,\n:focus:after,\n:focus:before {\n    width: 100%;\n    left: 0;\n}\n`\n","import { useSelector, useDispatch } from \"react-redux\"\nimport {selectContacts} from \"../../redux/selectors\"\nimport PropTypes from 'prop-types';\nimport {AppBarStyled, AppBarSpanStyled, AppBarStyledInput, AppBarStyledButton} from './InputField.styled'\nimport {addContact} from \"../../redux/operations\"\n\n\n\n\nexport default function InputField ({title, titleInputOne, titleInputTwo}) {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const check = (nameContact) => {\n     const checkBoolean = contacts.find(contact => contact.name === nameContact)\n     return checkBoolean\n    }\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const checkBoolean = check(event.target.elements.name.value)\n        if(checkBoolean){\n            return alert(`${event.target.elements.name.value} is already in contacts`)\n        } else {\n            dispatch(addContact({name: event.target.elements.name.value, phone: event.target.elements.number.value}))\n        }\n        event.target.reset()\n    }\n\n    return <AppBarStyled>\n        <h1> {title} </h1>\n        <form onSubmit={handleSubmit}>\n        <label> <AppBarSpanStyled>{titleInputOne}</AppBarSpanStyled>\n            <AppBarStyledInput           \n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. \n            For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required/>\n        </label>\n        <label> <AppBarSpanStyled>{titleInputTwo}</AppBarSpanStyled>\n             <AppBarStyledInput             \n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required/>\n        </label>\n        <AppBarStyledButton type=\"submit\">Add Contact</AppBarStyledButton>\n        </form>\n    </AppBarStyled>\n}\n\n\nInputField.propTypes = {\n    title: PropTypes.string.isRequired,\n    titleInputOne: PropTypes.string.isRequired,\n    titleInputTwo: PropTypes.string.isRequired,\n}","import styled from 'styled-components'\n\nexport const FilterStyled = styled.span`\nmargin-right: 15px;\n`","import { useDispatch } from \"react-redux\"\nimport {FilterStyled} from \"./Filter.styled\"\nimport {setStatusFilter} from \"../../redux/filterSlice\"\nimport PropTypes from 'prop-types';\n\nexport default function Filter({title, titleInput}) {\n\n    const dispatch = useDispatch()\n\n    const handleChange = (event) => {\n        dispatch(setStatusFilter(event.target.value))\n    }\n\n    return <section>\n    <h1>{title}</h1>\n    <label> <FilterStyled>{titleInput}</FilterStyled>\n        <input type='text' onChange={handleChange} />\n    </label>\n    </section>\n}\n\nFilter.propTypes = {\n    title: PropTypes.string.isRequired,\n    titleInput: PropTypes.string.isRequired,\n}","import styled from 'styled-components'\n\nexport const ContactsStyled = styled.ul`\npadding: 0;\n`","import styled from 'styled-components'\n\nexport const ContactStyled = styled.li`\ndisplay: flex;\nalign-items: center;\ngap: 15px;\n`\n\nexport const ContactStyledButton = styled.button`\ndisplay: inline-flex;\n    margin: 10px;\n    text-decoration: none;\n    position: relative;\n    font-size: 12px;\n    line-height: 12px;\n    padding: 6px 15px;\n    color: black;\n    font-weight: bold;\n    text-transform: uppercase;\n    font-family: 'Roboto Condensed', Тahoma, sans-serif;\n    background: buttonface;\n    cursor: pointer;\n    border: 2px solid #BFE2FF;\n\n:hover,\n:active,\n:focus {\n    color: blue;\n}\n\n:after,\n:before {\n    position: absolute;\n    height: 2px;\n    left: 50%;\n    background: #337AB7;\n    bottom: -6px;\n    content: \"\";\n    transition: all 280ms ease-in-out;\n    width: 0;\n}\n:before {\n    top: -6px;\n}\n:hover:after,\n:hover:before,\n:active:after,\n:active:before,\n:focus:after,\n:focus:before {\n    width: 100%;\n    left: 0;\n}\n`","import { ContactStyled, ContactStyledButton } from \"./Contact.styled\"\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../../redux/operations\"\nimport PropTypes from 'prop-types';\n\n\nexport default function Contact({contact}) {\n\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(deleteContact(contact.id))\n    }\n    \n    return <ContactStyled>\n            <p>{contact.name}: {contact.number}</p>\n            <ContactStyledButton type=\"button\" onClick={handleClick} > Delete</ContactStyledButton>\n           </ContactStyled>\n    \n}\n\nContact.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }) \n}","import { useSelector } from \"react-redux\";\nimport {selectContacts, selectFilter} from \"../../redux/selectors\"\nimport {ContactsStyled} from \"./Contacts.styled\"\n\nimport Contact from \"./Contact/Contact\"\n\nconst getVisibleContacts = (contacts, filterNormalize) => {\n   return contacts.filter(contact => {  \n    return contact.name.toLowerCase().includes(filterNormalize)})\n}\n\n\nexport default function Contacts() {\n\nconst contacts = useSelector(selectContacts)\nconst filter = useSelector(selectFilter)\n\nconst normalize = filter.toLowerCase()\n\nconst visibleContacts = getVisibleContacts(contacts, normalize)\n\n\n    return <section>\n        <ContactsStyled>\n        {visibleContacts.map(contact => {\n            return <Contact contact={contact} key={contact.id}/>\n        })}\n        </ContactsStyled>\n    </section>\n}","import InputField from \"components/InputField/InputField\";\nimport Filter from \"components/Filter/Filter\";\nimport Contacts from \"components/Contacts/Contacts\";\n//import {selectIsLoading, selectError} from \"../../redux/selectors\"\nimport {useDispatch} from \"react-redux\";\nimport { fetchContacts } from \"../../redux/operations\";\nimport { useEffect } from \"react\";\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n\n//    const isLoading = useSelector(selectIsLoading)\n//    const error = useSelector(selectError)\n// {isLoading && !error && <p>Request in progress...</p>}\n\n\n      useEffect(() => { dispatch(fetchContacts());}, [dispatch])\n\n\n    return <>\n           <InputField title='Phonebook' titleInputOne='Name' titleInputTwo='Number'/>\n           <Filter title='Contacts' titleInput='Find contacts by name'/>\n           <Contacts />\n    </>\n}"],"names":["AppBarStyled","styled","AppBarSpanStyled","AppBarStyledInput","AppBarStyledButton","InputField","title","titleInputOne","titleInputTwo","dispatch","useDispatch","contacts","useSelector","selectContacts","onSubmit","event","nameContact","preventDefault","target","elements","name","value","find","contact","alert","addContact","phone","number","reset","type","pattern","required","FilterStyled","Filter","titleInput","onChange","setStatusFilter","ContactsStyled","ContactStyled","ContactStyledButton","Contact","onClick","deleteContact","id","Contacts","visibleContacts","filterNormalize","filter","toLowerCase","includes","getVisibleContacts","selectFilter","map","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}